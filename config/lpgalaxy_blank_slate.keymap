#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   1
// #define TBLE_MIT     1
// #define TBLE_DUAL_2U 1

#define DEF 0
#define NAV 1
#define NUM 2
#define FNC 3

/ {

    chosen {
       zmk,physical-layout =
#ifdef TBLE_DUAL_2U
                       &layout_ortho_4x12_2x2u;
#elif defined(TBLE_MIT)
                       &layout_ortho_4x12_1x2u;
#else
                       &layout_ortho_4x12_all1u;
#endif
    };

// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM NAV>;
	    then-layer = <FNC>;
        };
    };
#endif

    combos {
        compatible = "zmk,combos";
	combo_tab {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp TAB>;
	};

	combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
	};

	combo_caps {
            timeout-ms = <50>;
            key-positions = <12 14>;
            bindings = <&kp CAPS>;
	};

	combo_dot {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp DOT>;
	};

	combo_comma {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp COMMA>;
	};

	combo_semi {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp SEMI>;
	};

	combo_slash {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp SLASH>;
	};

	combo_ctrlz {
	    timeout-ms = <50>;
	    key-positions = <24 27>;
	    bindings = <&kp LC(Z)>;
        };

	combo_ctrlx {
	    timeout-ms = <50>;
	    key-positions = <24 25>;
	    bindings = <&kp LC(X)>;
        };

	combo_ctrlc {
	    timeout-ms = <50>;
	    key-positions = <25 26>;
	    bindings = <&kp LC(C)>;
        };

	combo_ctrlv {
	    timeout-ms = <50>;
	    key-positions = <26 27>;
	    bindings = <&kp LC(V)>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            bindings = <
		#ifdef QWERTY_BASE
 			&kp Q      &kp W      &kp E     &mt LPAR R   &mt RPAR T    &mt LBKT Y   &mt RBKT U   &kp I     &kp O     &kp P      &kp C_BRI_UP    &kp C_VOL_UP
 			&kp A      &kp S      &kp D     &mt LBRC F   &mt RBRC G    &mt LT H     &mt GT J     &kp K     &kp L     &kp RET    &kp C_BRI_DN    &kp C_VOL_DN
 			&kp Z      &kp X      &kp C     &kp V        &kp SPACE     &kp BSPC     &kp B        &kp N     &kp M     &mo NAV    &kp LANG1       &kp C_MUTE

		#else
 			&kp ESC    &kp Q      &kp W      &kp F       &kp P          &kp B          &kp J            &kp L          &kp U       &kp Y      &kp QUOT      &kp BKSP
 			&kp TAB    &kp A      &kp R      &kp S       &kp T          &kp G          &kp M            &kp N          &kp E       &kp I      &kp O         &kp QUOT
 			&kp LSHFT  &kp Z      &kp X      &kp C       &kp D          &kp V          &kp K            &kp H          &kp COMMA   &kp DOT    &kp SEMI      &kp RET
		#endif
		#ifdef TBLE_DUAL_2U
 			&kp LCTRL  &kp LGUI   &kp LALT   &mo NAV         &shifty                        &kp SPACE                &mo NUM_L   &kp LALT   &kp RGUI      &kp RSHIFT
		#elif defined(TBLE_MIT)
 			&kp LCTRL  &mo FNC   &kp LGUI  &kp LALT    &mo NAV          &kp SPACE                   &mo NUM      &kp LEFT    &kp UP     &kp DOWN      &kp RIGHT
		
		#else
 			&kp LCTRL  &kp LGUI   &kp LALT  &mo NUM      &kp LSHIFT    &kp DEL      &kp K_APP    &kp RALT  &kp RGUI  &kp RCTRL  &kp LANG2       &mo FNC
		#endif
           	 >;
        };

        NAV_layer {
            label = "NAV";
            bindings = <
			&kp F1      &kp F2      &kp F3      &kp F4      &none      &none     &kp HOME     &none       &kp PG_UP      &none      &none     &none
			&kp F5      &kp F6      &kp F7      &kp F8      &none      &none     &kp END      &kp UP      &kp PG_DN      &trans     &none     &none
			&kp F9      &kp F10     &kp F11     &kp F12     &none      &trans    &kp LEFT     &kp DOWN    &kp RIGHT      &trans     &none     &none

		#ifdef TBLE_DUAL_2U
 			&kp LCTRL  &kp LGUI   &kp LALT   &mo NAV         &shifty                        &kp SPACE                &mo NUM_L   &kp LALT   &kp RGUI      &kp RSHIFT
		#elif defined(TBLE_MIT)
 			&kp LCTRL  &mo FNC   &kp LGUI  &kp LALT    &mo NAV          &kp SPACE                   &mo NUM      &kp LEFT    &kp UP     &kp DOWN      &kp RIGHT
		
		#else
			&trans      &trans      &trans      &trans      &trans     &trans    &trans       &trans      &trans         &trans     &none     &none
		#endif
          	  >;
        };

        NUM_layer {
            label = "NUM";
            bindings = <
			&kp GRAVE    &kp APOS    &kp SEMI    &kp BSLH     &none      &none      &kp N7    &kp N8     &kp N9      &kp EQUAL   &trans    &trans
			&kp EXCL     &kp AT      &kp HASH    &kp DOLLAR   &none      &none      &kp N4    &kp N5     &kp N6      &trans      &trans    &trans
			&kp PRCNT    &kp CARET   &kp AMPS    &kp ASTRK    &trans     &trans     &kp N1    &kp N2     &kp N3      &kp PLUS    &trans    &trans

		#ifdef TBLE_DUAL_2U
 			&kp LCTRL  &kp LGUI   &kp LALT   &mo NAV         &shifty                        &kp SPACE                &mo NUM_L   &kp LALT   &kp RGUI      &kp RSHIFT
		#elif defined(TBLE_MIT)
 			&kp LCTRL  &mo FNC   &kp LGUI  &kp LALT    &mo NAV          &kp SPACE                   &mo NUM      &kp LEFT    &kp UP     &kp DOWN      &kp RIGHT
		
		#else
			&trans       &trans      &trans      &trans       &trans     &trans     &kp N0    &kp SLASH  &kp ASTRK   &kp MINUS   &trans    &trans
		#endif
          	  >;
        };

        FNC_layer {
            label = "FNC";
            bindings = <
			&bt &bt BT_SEL 0  &bt &bt BT_SEL 1  &bt &bt BT_SEL 2   &bt &bt BT_SEL 3    &bt &bt BT_SEL 4    &none        &none        &none      &none      &none      &none     &bootloader
			&none             &none             &none              &none               &none               &none        &none        &none      &none      &none      &none     &none
			&none             &none             &none              &none               &none               &none        &none        &none      &none      &none      &none     &bt BT_CLR

		#ifdef TBLE_DUAL_2U
 			&kp LCTRL  &kp LGUI   &kp LALT   &mo NAV         &shifty                        &kp SPACE                &mo NUM_L   &kp LALT   &kp RGUI      &kp RSHIFT
		#elif defined(TBLE_MIT)
 			&kp LCTRL  &mo FNC   &kp LGUI  &kp LALT    &mo NAV         &kp SPACE                   &mo NUM      &kp LEFT    &kp UP     &kp DOWN      &kp RIGHT
		
		#else
			&none             &none             &none              &none               &none               &none        &none        &none      &none      &none      &none     &trans
		#endif
         	   >;
        };

    };
};

