/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   1
// #define TBLE_MIT     1
// #define TBLE_DUAL_2U 1

#define NAV_L 1
#define NUM_L 2
#define FNC_L 3
#define NEW_L 4


// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };
&mt { quick-tap-ms = <100>; flavor = "tap-preferred"; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,physical-layout =
#ifdef TBLE_DUAL_2U
                       &layout_ortho_4x12_2x2u;
#elif defined(TBLE_MIT)
                       &layout_ortho_4x12_1x2u;
#else
                       &layout_ortho_4x12_all1u;
#endif
    };

    macros {
      ZMK_MACRO(thumbs_up,
		wait-ms = <1>;
		tap-ms = <5>;
                bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		)
    };
    
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};
    };


// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM_L NAV_L>;
	    then-layer = <FNC_L>;
        };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
#ifdef QWERTY_BASE 
		 &kp Q      &kp W      &kp E     &kp R    &kp T      &kp ESC    &kp INS    &kp Y     &kp U     &kp I      &kp O    &kp P
		 &kp A      &kp S      &kp D     &kp F    &kp G      &kp TAB    &kp RET    &kp H     &kp J     &kp K      &kp L    &kp SEMI
		 &kp Z      &kp X      &kp C     &kp V    &kp SPACE  &kp CAPS   &kp DEL    &kp BSPC  &kp B     &kp N      &kp M    &kp SLASH
#else
 &kp ESC    &kp Q      &kp W      &kp F       &kp P          &kp B          &kp J            &kp L          &kp U       &kp Y      &kp QUOT      &kp BKSP
 &kp TAB    &kp A      &kp R      &kp S       &kp T          &kp G          &kp M            &kp N          &kp E       &kp I      &kp O         &kp QUOT
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp D          &kp V          &kp K            &kp H          &kp COMMA   &kp DOT    &kp SEMI      &kp RET
#endif
#ifdef TBLE_DUAL_2U
 &kp LCTRL  &kp LGUI   &kp LALT   &mo NAV_L         &shifty                        &kp SPACE                &mo NUM_L   &kp LALT   &kp RGUI      &kp RSHIFT
#elif defined(TBLE_MIT)
 &kp LCTRL  &mo FNC_L   &kp LGUI  &kp LALT    &mo NAV_L          &kp SPACE                   &mo NUM_L      &kp LEFT    &kp UP     &kp DOWN      &kp RIGHT
#else
		 &kp LCTRL  &kp LGUI   &kp LALT  &kp LSHIFT   &mo NUM_L  &mo NEW_L  &mo FNC_L  &mo NAV_L  &kp RSHIFT   &kp RALT  &kp RGUI  &kp RCTRL
#endif
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
		&kp F1      &kp F2      &kp F3      &kp F4      &none      &none      &none     &none     &kp HOME     &kp UP       &kp END    &kp PG_UP
		&kp F5      &kp F6      &kp F7      &kp F8      &none      &none      &none     &none     &kp LEFT     &kp DOWN     &kp RIGHT  &kp PG_DOWN
		&kp F9      &kp F10     &kp F11     &kp F12     &none      &trans     &trans    &trans    &none        &kp SPACE    &none      &kp RET
#ifdef TBLE_DUAL_2U
&trans  &trans        &trans     &trans              &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans        &trans     &trans      &trans                &trans             &trans      &trans   &trans &trans &trans
#else
		&trans      &trans      &trans      &trans      &trans     &trans    &trans     &trans    &trans       &trans       &trans    &trans
#endif
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
		&kp GRAVE    &kp APOS    &kp SEMI    &kp BSLH     &kp LPAR   &kp RPAR    &kp LBKT    &kp RBKT    &kp N7    &kp N8     &kp N9      &kp PLUS
		&kp EXCL     &kp AT      &kp HASH    &kp DOLLAR   &kp LT     &kp GT      &kp LBRC    &kp RBRC    &kp N4    &kp N5     &kp N6      &kp MINUS
		&kp PRCNT    &kp CARET   &kp AMPS    &kp ASTRK    &trans     &trans      &trans      &trans      &kp N1    &kp N2     &kp N3      &kp STAR
#ifdef TBLE_DUAL_2U
&trans  &trans       &trans     &kp N0              &trans                 &trans            &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans       &trans     &kp N0      &trans           &none            &trans        &kp DEL      &trans &trans &trans
#else			
		&trans       &trans      &trans      &trans       &trans     &trans    &trans      &none       &kp N0    &kp DOT   &kp COMMA    &kp SLASH
#endif
            >;
        };

        fnc_layer {
            label = "FNC";
            bindings = <
		&bt BT(0)    &bt BT(1)    &bt BT(2)     &bt BT(3)     &bt BT(4)     &none        &none        &none      &none      &none      &studio_unlock     &bootloader
		&none        &none        &none         &none         &none         &none        &none        &none      &none      &none      &none     &none
		&none        &none        &none         &none         &none         &none        &none        &none      &none      &none      &none     &none
#ifdef TBLE_DUAL_2U
&trans &trans        &trans     &kp RPAR                &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans &trans        &trans     &kp RPAR        &trans                &trans             &trans      &trans   &trans &trans &trans
#else
		&bt BT_CLR   &none        &none         &none         &none         &none        &none        &none      &none      &none       &none   &none
#endif
            >;
        };

        new_layer {
            label = "NEW";
            bindings = <
		&none    &none     &none      &none       &none      &none      &none     &none      &none      &none      &none     &none
		&none    &none     &none      &none       &none      &none      &none     &none      &none      &none      &none     &none
		&none    &none     &none      &none       &none      &none      &none     &none      &none      &none      &none     &none
#ifdef TBLE_DUAL_2U
&none    &none     &none      &none       &none      &none      &none     &none      &none      &none      &none     &none
#elif defined(TBLE_MIT)
&none    &none     &none      &none       &none      &none      &none     &none      &none      &none      &none     &none
#else
		&none    &none     &none      &none       &none      &none      &none     &none      &none      &none      &none     &none
#endif
            >;
        };


    };
};
