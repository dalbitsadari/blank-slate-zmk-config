/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   1
// #define TBLE_MIT     1
// #define TBLE_DUAL_2U 1

#define NAV 1
#define NUM 2
#define FNC 3
#define MED 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    macros {
      ZMK_MACRO(thumbs_up,
		wait-ms = <1>;
		tap-ms = <5>;
                bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		)
    };
    
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};
    };

    combos {
        compatible = "zmk,combos";
        combo_del {
            timeout-ms = <50>;
            key-positions = <11 23>;
            bindings = <&kp DEL>;
        };
    };


// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM NAV>;
	    then-layer = <FNC>;
        };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
#ifdef QWERTY_BASE
 &kp ESC    &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp BKSP
 &kp TAB    &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp SEMI      &kp RET  
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      &mo NAV
#else
 &kp ESC    &kp Q      &kp W      &kp F       &kp P          &kp B          &kp J            &kp L          &kp U       &kp Y      &kp QUOT      &kp BKSP
 &kp TAB    &kp A      &kp R      &kp S       &kp T          &kp G          &kp M            &kp N          &kp E       &kp I      &kp O         &kp QUOT
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp D          &kp V          &kp K            &kp H          &kp COMMA   &kp DOT    &kp SEMI      &kp RET
#endif
#ifdef TBLE_DUAL_2U
 &kp LCTRL  &kp LGUI   &kp LALT   &mo NAV         &shifty                        &kp SPACE                &mo NUM   &kp LALT   &kp RGUI      &kp RSHIFT
#elif defined(TBLE_MIT)
 &kp LCTRL  &mo FNC   &kp LGUI  &kp LALT    &mo NAV             &kp SPACE                &mo NUM      &kp LEFT    &kp UP     &kp DOWN      &kp RIGHT
#else
 &kp LCTRL  &mo FNC   &kp LALT  &kp LGUI    &mo NUM      &kp SPACE      &kp LSHIFT       &mo MED      &kp RGUI    &kp RALT   &kp RCTRL     &kp K_APP
#endif
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&trans      &none      &none      &none      &none      &none      &none      &none      &none       &none      &none      &trans
&trans      &none      &none      &none      &none      &none      &none      &kp PG_UP  &kp HOME    &kp UP     &kp END    &trans
&trans      &none      &none      &none      &none      &none      &none      &kp PG_DN  &kp LEFT    &kp DOWN   &kp RIGHT  &trans
#ifdef TBLE_DUAL_2U
&trans  &trans        &trans     &trans              &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans        &trans     &trans      &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans  &trans        &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans     &kp EXCL   &kp AT    &kp HASH         &kp DOLLAR         &kp LPAR       &kp RPAR          &kp KP_N7   &kp KP_N8    &kp KP_N9   &kp KP_PLUS      &trans
&trans     &kp PRCNT  &kp CARET &kp AMPS         &kp ASTRK          &kp LBKT       &kp RBKT          &kp KP_N4   &kp KP_N5    &kp KP_N6   &kp MINUS        &trans
&trans     &kp GRAVE  &kp TILDE &kp SINGLE_QUOTE &kp DOUBLE_QUOTES  &kp LESS_THAN  &kp GREATER_THAN  &kp KP_N1   &kp KP_N2    &kp KP_N3   &kp KP_MULTIPLY  &trans
#ifdef TBLE_DUAL_2U
&trans  &trans       &trans     &kp N0              &trans                 &trans            &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans       &trans     &kp N0      &trans           &none            &trans        &kp DEL      &trans &trans &trans
#else
&trans  &trans       &trans     &trans      &trans    &trans      &trans     &kp KP_N0    &kp KP_DOT   &kp KP_EQUAL   &kp KP_DIVIDE    &trans
#endif
            >;
        };

        fnc_layer {
            label = "FNC";
            bindings = <
&trans     &kp F1     &kp F2     &kp F3      &kp F4       &kp F5       &F6       &none      &kp INS    &kp PRINTSCREEN       &kp PAUSE_BREAK     &bootloader
&CAPSLOCK  &kp F7     &kp F8     &kp F9      &kp F10      &kp F11      &F12      &none      &none      &none                 &kp SCROLLLOCK      &trans
&trans     &none      &none      &none       &none        &none        &none     &none      &none      &none                 &none               &trans
#ifdef TBLE_DUAL_2U
&trans &trans        &trans     &kp RPAR                &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans &trans        &trans     &kp RPAR        &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans &trans        &trans     &trans        &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };

        med_layer {
            label = "MED";
            bindings = <
&trans      &bt BT(0)  &bt BT(1)  &bt BT(2)  &bt BT(3)  &bt BT(4)  &none      & C_BRI_DEC  &C_BRI_UP  &C_VOL_DN  &C_VOL_UP &C_MUTE
&trans      &none      &none      &none      &none      &none      &none      &none       &C_PREV    &C_PP      &C_NEXT    &none
&trans      &none      &none      &none      &none      &none      &none      &none       &none      &none      &none      &none
#ifdef TBLE_DUAL_2U
&trans      &trans     &trans     &trans          &trans                &trans            &trans     &trans     &trans     &trans
#elif defined(TBLE_MIT)
&trans      &trans     &trans     &tran      &trans          &trans           &trans      &trans     &trans     &trans     &trans
#else  
&bt BT_CLR &trans     &trans     &trans     &trans     &trans    &trans      &trans      &trans     &trans     &trans     &trans
#endif
            >;
        };


    };
};

